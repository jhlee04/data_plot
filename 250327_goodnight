# 1. Google Drive 마운트는 생략 (로컬 실행 가정)
# 2. 라이브러리 불러오기
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import matplotlib.patches as patches

# 3. 예시용 CSV 데이터 생성
# 실사용 시: df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/data.csv')
np.random.seed(42)
categories = [f"Category {i}" for i in range(1, 11)]
data = []

for cat in categories:
    for _ in range(np.random.randint(10, 20)):
        data.append({
            "Category": cat,
            "Important": np.random.randint(1, 6),
            "Urgent": np.random.randint(1, 6),
            "Resource": np.random.randint(1, 6),
            "Impact": np.random.randint(1, 6)
        })
df = pd.DataFrame(data)

# 4. 카테고리 정렬 및 색상 지정
unique_categories = sorted(df['Category'].unique().tolist())
color_palette = [
    "#a6cee3", "#1f78b4", "#08519c",   # 1~3: 파랑 계열
    "#fdbf6f", "#ff7f00", "#e6550d",   # 4~6: 주황 계열
    "#6a3d9a",                         # 7: 보라
    "#b2df8a", "#33a02c",              # 8~9: 녹색 계열
    "#999999"                          # 10: 회색
]
category_colors = {
    cat: color_palette[i % len(color_palette)]
    for i, cat in enumerate(unique_categories)
}

# 5. 카테고리 그룹 분류
category_groups = {
    "Group 1": [f"Category {i}" for i in range(1, 4)],
    "Group 2": [f"Category {i}" for i in range(4, 7)],
    "Group 3": [f"Category {i}" for i in range(7, 11)],
}
def assign_group(category):
    for group, cats in category_groups.items():
        if category in cats:
            return group
    return "Other"
df["Group"] = df["Category"].apply(assign_group)

# 6. 지표별 Facet Histogram 시각화
metrics = ['Important', 'Urgent', 'Resource', 'Impact']
for metric in metrics:
    plt.figure()
    g = sns.FacetGrid(df, col="Group", col_order=["Group 1", "Group 2", "Group 3"], height=4.5, aspect=1.2)
    g.map_dataframe(
        sns.histplot,
        x=metric,
        hue="Category",
        multiple="stack",
        bins=5,
        discrete=True,
        palette=category_colors,
        shrink=0.8
    )
    g.set_titles("{col_name}")
    g.set_axis_labels(metric, "Count")
    g.set(xticks=range(1, 6))
    g.add_legend(title="Category")
    plt.subplots_adjust(top=0.85)
    g.fig.suptitle(f"{metric} Distribution by Category Group", fontsize=16)
    plt.tight_layout()
    plt.show()
